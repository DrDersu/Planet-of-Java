package week4;

class Node<T>{
    private Node<T> next = null;
    private T data;

    public Node(T data){
        this.data = data;
    }

    public T getData(){
        return data;
    }

    public Node<T> getNext() {
        return next;
    }

    public void setNext(Node<T> next) {
        this.next = next;
    }


}

public class LinkedList<T> {
    private Node<T> head = null;
    private int size = 0;

    public void remove(T data){
        Node<T> cur = head;

        if(head.getData().equals(data)){
            head = head.getNext();
        }
        else{
            while(cur.getNext() != null){
                if(cur.getNext().getData().equals(data)){
                    cur.setNext(cur.getNext().getNext());
                    break;
                }
                cur = cur.getNext();
            }
        }

        size--;
    }
    public T get(int index){
        int i = 0;
        Node<T> cur = head;
        while(i!=index){
            i++;
            cur = cur.getNext();
        }
        return cur.getData();
    }
    public void add(T data){
        if(head == null){
            head = new Node<T>(data);
        }
        else{
            Node<T> last = head;

            while(last.getNext() != null){
                last = last.getNext();
            }
            last.setNext(new Node<T>(data));
        }

        size++;
    }

    public String toString(){
        String all = "";

        Node<T> cur = head;
        while(cur != null){
            all += (cur.getData().toString() + "\n");
            cur = cur.getNext();
        }

        return all;
    }


    public T getFirst(){
        return head.getData();
    }
    public T getLast(){
        Node<T> last = head;
        while(last.getNext()!=null)
            last = last.getNext();
        return last.getData();
    }
    public int indexOf(Object o){
        int index = 0;
        Node<T> last = head;
        while(last.getData()!= o){
            last = last.getNext();
            index++;
        }
        return index;
    }

    public void print()
    {
        Node<T> last = head;
        while(last!=null){
            System.out.println(last.getData());
            last = last.getNext();
        }
    }

    public int size(){
        return size;
    }

    public void set(int index, T element){
        int i = 0;
        Node<T> last = head;
        Node<T> next;
        if(index==0) {
            next = last.getNext();
            head = new Node<T>(element);
            head.setNext(next);
        }
        else{
            while(i!=index-1){
                i++;
                last = last.getNext();
            }
            next = last.getNext().getNext();
            last.setNext(new Node<T>(element));
            last.getNext().setNext(next);
        }
    }

    public void clear(){
        Node<T> last = head;
        while(last.getNext()!=null){
            remove(last.getData());
            last = last.getNext();
        }
        head = null;
    }

    public void remove(){
        head = head.getNext();
    }

    public void remove(int index){
        if(index==0)
            remove();
        else{
            Node<T> last = head;
            int i = 0;
            while(i!=index-1)
                last = last.getNext();
            last.setNext(last.getNext().getNext());
        }
    }

    public void add(int index, T element){
        Node<T> last = head;
        Node<T> mid = new Node<T>(element);
        int i = 0;
        if(index==this.size+1){
            add(element);
        }
        else if(index==0){
            mid.setNext(head);
            head = mid;
        }
        else{
            while(i!=index-1) {
                last = last.getNext();
                i++;
            }
            mid.setNext(last.getNext());
            last.setNext(mid);
        }
    }
    public void addFirst(T e){
        add(0, e);
    }

    public LinkedList clone(){
        LinkedList copy = new LinkedList();
        int i = 0;
        while(i!=size) {
            copy.add(i, get(i));
            i++;
        }
        return copy;
    }

    public void addAll(LinkedList<T> list2){
        int i = 0;
        while(i!=list2.size()+1){
            add(list2.get(i));
            i++;
        }
    }



}
