package week4;

public class DoubleLinkedList<E> {
    private Node<E> head = null;
    private int size = 0;


    public void add(E e, boolean ishead){
        Node<E> last = head;
        Node<E> mid = new Node<>(e);
        if(ishead){
            mid.setNext(head);
            head = mid;
        }
        else{
            while(last.getNext() != null){
                last = last.getNext();
            }
            last.setNext(new Node<E>(e));
        }
        
        
        size++;
    }

    public void add(int index, E e){
        if(index==0){
            add(e, true);
            size--;
        }
        else{
            Node<E> last = head;
            Node<E> mid = new Node<>(e);
            int i = 0;
            while(i!= index-1){
                last = last.getNext();
                i++;
            }
            mid.setNext(last.getNext());
            last.setNext(mid);
            
        }
        
        size++;
    }

    public E get(int index){
        int i = 0;
        Node<E> last = head;
        while(i!=index) {
            last = last.getNext();
            i++;
        }
        return last.getData();

    }

    public E getFirst(){
        return get(0);
    }

    public E getLast(){
        Node<E> last = head;
        while (last.getNext()!= null)
            last = last.getNext();
        return last.getData();
    }

    public void remove(boolean ishead){
        if(ishead){
            head = head.getNext();
        }
        else{
            Node<E> last = head;
            while(last.getNext().getNext()!= null)
                last = last.getNext();
            last.setNext(null);
        }
        size--;
    }
    public int size(){
        return size;
    }
    public void remove(int index){
        Node<E> last = head;
        if(index==0){
            size++;     
            remove(true);
        }
        else if(index==this.size()){
            while(last.getNext().getNext()!=null)
                last = last.getNext();
            last.setNext(null);
        }
        else{
            int i = 0;
            while(i!=index-1){
                last = last.getNext();
                i++;
            }
            last.setNext(last.getNext().getNext());
        }
        size--;
    }
    
    public void set(int index, E e){
        int i = 0;
        Node<E> last = head;
        Node<E> next;
        if(index==0) {
            next = last.getNext();
            head = new Node<E>(e);
            head.setNext(next);
        }
        else{
            while(i!=index-1){
                i++;
                last = last.getNext();
            }
            next = last.getNext().getNext();
            last.setNext(new Node<E>(e));
            last.getNext().setNext(next);
        }
    }
    
    public void print(boolean ishead){
        int i = 0;
        if(ishead){
            while(i!=size){
                System.out.println(get(i));
                i++;
            }
        }
        else{
            i = size-1;
            while(i!=-1){
                System.out.println(get(i));
                i--;
            }
        }
    }
    public String toString(){
        String all = "";

        Node<E> cur = head;
        while(cur != null){
            all += (cur.getData().toString() + "\n");
            cur = cur.getNext();
        }

        return all;
    }
}
